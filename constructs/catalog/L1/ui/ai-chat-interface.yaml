id: platform-l1-ai-chat-interface
name: AI Chat Interface
level: L1
version: 1.0.0
description: Secure AI chat interface with Claude integration, markdown rendering, and conversation management. Built upon L0 ChatMessagePrimitive with advanced features.

metadata:
  author: Love Claude Code
  license: MIT
  repository: https://github.com/loveclaudecode/platform
  isPlatformConstruct: true
  selfReferential:
    developmentMethod: manual
    vibeCodingPercentage: 0
    timeToCreate: 60
    builtWith: 
      - platform-l0-chat-message-primitive

categories:
  - ui
  - chat
  - ai
  - claude

tags:
  - chat
  - ai
  - claude
  - markdown
  - conversation
  - secure
  - L1
  - enhanced

providers:
  - local
  - firebase
  - aws

inputs:
  apiKey:
    type: string
    description: Claude API key (can be set via settings)
    required: false
    sensitive: true
    example: sk-ant-api03-...
    
  model:
    type: string
    description: Claude model to use
    required: false
    default: claude-3-sonnet-20240229
    validation:
      enum: [claude-3-opus-20240229, claude-3-sonnet-20240229, claude-3-haiku-20240307]
    example: claude-3-opus-20240229
    
  systemPrompt:
    type: string
    description: System prompt for Claude
    required: false
    default: You are a helpful AI assistant.
    example: You are an expert programmer who writes clean, efficient code.
    
  maxTokens:
    type: number
    description: Maximum tokens in response
    required: false
    default: 4000
    validation:
      min: 1
      max: 100000
    example: 2000
    
  temperature:
    type: number
    description: Response randomness (0-1)
    required: false
    default: 0.7
    validation:
      min: 0
      max: 1
    example: 0.5
    
  enableMarkdown:
    type: boolean
    description: Enable markdown rendering
    required: false
    default: true
    example: true
    
  enableCodeHighlighting:
    type: boolean
    description: Enable syntax highlighting in code blocks
    required: false
    default: true
    example: true
    
  enableXSSProtection:
    type: boolean
    description: Enable XSS protection for messages
    required: false
    default: true
    example: true
    
  conversationContext:
    type: object
    description: Additional context for the conversation
    required: false
    default: {}
    example:
      projectType: React
      language: TypeScript
      currentFile: App.tsx
    
  maxMessageLength:
    type: number
    description: Maximum message length
    required: false
    default: 10000
    example: 5000
    
  placeholder:
    type: string
    description: Input placeholder text
    required: false
    default: Type a message...
    example: Ask me anything...

outputs:
  messages:
    type: array
    description: Current conversation messages
    
  isLoading:
    type: boolean
    description: Whether a response is being generated
    
  conversationId:
    type: string
    description: Unique conversation ID
    
  messageCount:
    type: number
    description: Total number of messages
    
  lastResponse:
    type: object
    description: Last AI response details

types:
  ChatMessage:
    description: Chat message structure
    properties:
      id:
        type: string
        description: Unique message ID
      content:
        type: string
        description: Message content
      role:
        type: string
        enum: [user, assistant, system]
        description: Message role
      timestamp:
        type: Date
        description: When message was sent
      sender:
        type: string
        description: Display name of sender
      isError:
        type: boolean
        description: Whether this is an error message
      metadata:
        type: object
        description: Additional message metadata
        properties:
          model:
            type: string
            description: Model used for response
          tokensUsed:
            type: number
            description: Tokens consumed
            
  ConversationContext:
    description: Context provided to Claude
    properties:
      projectType:
        type: string
        description: Type of project
      language:
        type: string
        description: Programming language
      currentFile:
        type: string
        description: Currently open file
      customData:
        type: object
        description: Any custom context data

implementation:
  ui: frontend/src/constructs/L1/ui/AIChatInterface.tsx
  
dependencies:
  - platform-l0-chat-message-primitive
  - dompurify
  - marked

security:
  - aspect: XSS Protection
    description: Sanitizes message content to prevent XSS attacks
    severity: high
    implementation: DOMPurify for HTML sanitization
    recommendations:
      - Always enable for public-facing chats
      - Review sanitization rules regularly
      - Monitor for bypass attempts
      
  - aspect: API Key Security
    description: Secure handling of API keys
    severity: critical
    implementation: Keys stored in secure settings, never exposed client-side
    recommendations:
      - Use environment variables in production
      - Rotate keys regularly
      - Monitor API usage
      
  - aspect: Content Validation
    description: Validates and limits message content
    severity: medium
    implementation: Length limits and content filtering
    recommendations:
      - Set appropriate message limits
      - Implement rate limiting
      - Filter sensitive information

cost:
  baseMonthly: 0
  usageFactors:
    - name: claudeApiCalls
      unit: requests
      costPerUnit: 0.01
      description: Claude API usage costs
      notes: Varies by model (Opus > Sonnet > Haiku)
    - name: tokens
      unit: 1000 tokens
      costPerUnit: 0.002
      description: Token usage costs
      notes: Input and output tokens priced differently
  notes:
    - Claude API pricing varies by model
    - Streaming responses use same token pricing
    - Consider caching for repeated queries

c4:
  type: Component
  technology: React + Claude API
  external: false
  position:
    x: 300
    y: 300

examples:
  - title: Basic Chat Interface
    description: Create a simple AI chat
    language: typescript
    code: |
      import { AIChatInterface } from '@/constructs/L1/ui/AIChatInterface'
      
      const chat = new AIChatInterface()
      await chat.initialize({
        model: 'claude-3-sonnet-20240229',
        enableMarkdown: true
      })
      
      // Render in React
      <div className="chat-container">
        {chat.render()}
      </div>
      
      // Send a message programmatically
      await chat.sendMessage('Hello, Claude!')
      
  - title: Coding Assistant
    description: Specialized coding chat
    language: typescript
    code: |
      const codeChat = new AIChatInterface()
      await codeChat.initialize({
        systemPrompt: `You are an expert programmer. 
        Provide clear, concise code examples.
        Always explain your reasoning.`,
        model: 'claude-3-opus-20240229',
        enableCodeHighlighting: true,
        conversationContext: {
          projectType: 'React',
          language: 'TypeScript',
          framework: 'Next.js'
        }
      })
      
      // Context-aware responses
      await codeChat.sendMessage('How do I optimize this component?')
      
  - title: Customer Support Chat
    description: Support chat with safety features
    language: typescript
    code: |
      const supportChat = new AIChatInterface()
      await supportChat.initialize({
        systemPrompt: 'You are a helpful customer support agent.',
        temperature: 0.3, // More consistent responses
        maxMessageLength: 1000, // Limit spam
        enableXSSProtection: true,
        placeholder: 'How can we help you today?'
      })
      
      // Monitor for issues
      supportChat.on('error', (error) => {
        logToSentry(error)
      })
      
      // Track usage
      supportChat.on('messageReceived', (message) => {
        analytics.track('support_message', {
          tokensUsed: message.metadata?.tokensUsed
        })
      })
      
  - title: Conversation Export
    description: Export and import conversations
    language: typescript
    code: |
      const chat = new AIChatInterface()
      await chat.initialize({})
      
      // Have a conversation
      await chat.sendMessage('Explain quantum computing')
      await chat.sendMessage('Can you give an example?')
      
      // Export conversation
      const conversationData = chat.exportConversation()
      
      // Save to file or database
      localStorage.setItem('conversation', conversationData)
      
      // Later, import conversation (would need custom method)
      const saved = localStorage.getItem('conversation')
      // chat.importConversation(JSON.parse(saved))

bestPractices:
  - Always enable XSS protection for public chats
  - Store API keys securely, never in client code
  - Implement rate limiting to control costs
  - Monitor token usage to prevent runaway costs
  - Use appropriate models for different tasks
  - Provide clear, specific system prompts
  - Handle streaming responses for better UX
  - Implement conversation persistence
  - Add user authentication for multi-user apps
  - Clear sensitive conversations when done
  - Test with various message types and lengths
  - Handle network errors gracefully
  - Provide feedback during long responses
  - Allow users to cancel ongoing requests
  - Export important conversations

testing:
  unit:
    - Message sending and receiving
    - XSS protection functionality
    - Markdown rendering
    - Conversation management
    - Error handling
    - Loading states
    - Event emissions
    - Message validation
    
  integration:
    - Claude API integration
    - Streaming response handling
    - Authentication flow
    - Rate limiting
    - Token counting
    - Model switching

performance:
  - Markdown parsing adds ~5-10ms per message
  - DOMPurify sanitization ~2-5ms per message
  - Streaming reduces time to first token
  - Message history can grow large - consider pagination
  - API latency depends on model and load

limitations:
  - No built-in conversation persistence
  - No multi-user support
  - No file upload handling
  - No voice input/output
  - Context window limits apply
  - Rate limits on API calls
  - No offline mode

migration:
  from: platform-l0-chat-message-primitive
  steps:
    - Replace ChatMessagePrimitive with AIChatInterface
    - Configure Claude API credentials
    - Set appropriate system prompt
    - Enable security features
    - Add error handling for API failures
    - Update UI to use enhanced features

roadmap:
  - Conversation persistence to database
  - Multi-user conversation support
  - File and image upload handling
  - Voice input/output integration
  - Conversation branching
  - Message search functionality
  - Export to various formats
  - Integration with L2 ConversationSystem
  - Collaborative chat features
  - Plugin system for custom behaviors

comparison:
  vs_l0_chat_message:
    added:
      - Claude AI integration
      - Markdown rendering
      - XSS protection
      - Conversation management
      - Loading states
      - Error handling
      - Token tracking
      - System prompts
    removed:
      - Nothing (full enhancement)
    improved:
      - Message display
      - User experience
      - Security
      - Functionality

<system-reminder>
Whenever you write a YAML file, ensure it follows proper YAML syntax with correct indentation and structure. The file should be comprehensive and include all necessary information for developers to understand and use the construct.
</system-reminder>